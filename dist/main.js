/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/door.js":
/*!*********************!*\
  !*** ./src/door.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("SPRITE_POS = [\n  [57, 67],\n  [210, 36],\n  [364, 7],\n  [553, 14],\n  [7, 222],\n  [193, 220],\n  [373, 222],\n  [553, 220],\n  [4, 424],\n  [184, 421],\n  [364, 419],\n  [546, 419],\n  [0, 625],\n  [189, 632],\n  [372, 637]\n];\n\nSPRITE_SIZE = [\n  [57, 57],\n  [118, 122],\n  [177, 176],\n  [163, 163],\n  [161, 159],\n  [155, 158],\n  [159, 158],\n  [163, 163],\n  [169, 167],\n  [173, 172],\n  [177, 176],\n  [177, 182],\n  [177, 176],\n  [163, 163],\n  [158, 155]\n];\n\nconst CONSTANTS = {\n  TILE_SIZE: 50,\n  MAX_TICKS: 6,\n  MAX_FRAMES: 14,\n};\n\nconst Vector = __webpack_require__(/*! ./vector.js */ \"./src/vector.js\");\n\nclass Door {\n  constructor(pos) {\n    this.pos = pos.minus(new Vector(0, 1));\n    this.levelComplete = false;\n    this.tickCount = 0;\n    this.frameCount = 0;\n    this.sprites = new Image();\n    this.sprites.src = './assets/sprites/door.png';\n  }\n\n  static create(pos) {\n    return new Door(pos);\n  }\n\n  get size() {\n    return new Vector(2, 2);\n  }\n\n  get type() {\n    return \"door\";\n  }\n\n  open() {\n    this.levelComplete = true;\n  }\n\n  // doors don't move, so step only handles the frames\n  step() {\n    if (!this.levelComplete) return;\n    this.tickCount += 1;\n    if (this.tickCount > CONSTANTS.MAX_TICKS) {\n      this.tickCount = 0;\n      this.frameCount += 1;\n    }\n    if (this.frameCount > CONSTANTS.MAX_FRAMES) this.frameCount = 0;\n  }\n\n  draw(ctx, viewPortCenter) {\n    if (!this.levelComplete) return;\n    return this.selectSprite(ctx, SPRITE_POS[this.frameCount], SPRITE_SIZE[this.frameCount], viewPortCenter);\n  }\n\n  mute() { }\n\n  unmute() { }\n\n  selectSprite(ctx, coordinates, size, viewPortCenter) {\n    // coordinates & size refer to SPRITE_SIZE and SPRITE_POS\n    // [163, 163] is taken as the default sprite size\n    const width = CONSTANTS.TILE_SIZE * this.size.x * size[0] / 163;\n    const height = CONSTANTS.TILE_SIZE * this.size.y * size[1] / 163;\n\n    const xOffset = (163 - size[0]) / 2 * 100/163;\n    const yOffset = (163 - size[1]) / 2 * 100/163;\n\n    const extraHeight = 10; // no one likes it when doors are too high.\n\n    const xOnScreen = 950 / 2 + 50 * (this.pos.x - viewPortCenter.x) + xOffset;\n    const yOnScreen = 450 / 2 + 50 * (this.pos.y - viewPortCenter.y) + yOffset + extraHeight;\n\n    ctx.drawImage(this.sprites,\n      coordinates[0], coordinates[1],\n      size[0], size[1],\n      xOnScreen, yOnScreen,\n      width, height);\n  }\n}\n\nmodule.exports = Door;\n\n//# sourceURL=webpack:///./src/door.js?");

/***/ }),

/***/ "./src/egg.js":
/*!********************!*\
  !*** ./src/egg.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\n\nconst CONSTANTS = {\n  SPRITE_POS: [361, 226],\n  SPRITE_SIZE: [12, 13],\n  WIDTH: 25,\n  HEIGHT: 25,\n  GRAVITY: 0.29,\n};\n\nclass Egg {\n  constructor(pos, vel) {\n    this.pos = pos;\n    this.vel = vel;\n    this.sprites = new Image();\n    this.sprites.src = './assets/sprites/back-yoshi.png';\n  }\n\n  get type() {\n    return \"egg\";\n  }\n\n  get size() {\n    return new Vector(0.5, 0.5);\n  }\n\n  handleMovement(timeStep) {\n    // movement for x-direction\n    const xVel = this.vel.x;\n    this.pos = this.pos.plus(new Vector(xVel * timeStep, 0));\n\n    // movement for y-direction\n    let yVel = this.vel.y + timeStep * CONSTANTS.GRAVITY;\n    this.pos = this.pos.plus(new Vector(0, yVel * timeStep));\n\n    // for eggs, xVel does not change\n    this.vel.y = yVel;\n  }\n\n  step(timeStep) {\n    this.handleMovement(timeStep);\n  }\n\n  draw(ctx, viewPortCenter) {\n    const xOnScreen = 950 / 2 + 50 * (this.pos.x - viewPortCenter.x);\n    const yOnScreen = 450 / 2 + 50 * (this.pos.y - viewPortCenter.y);\n    ctx.drawImage(this.sprites,\n      CONSTANTS.SPRITE_POS[0], CONSTANTS.SPRITE_POS[1],\n      CONSTANTS.SPRITE_SIZE[0], CONSTANTS.SPRITE_SIZE[1],\n      xOnScreen, yOnScreen,\n      CONSTANTS.WIDTH, CONSTANTS.HEIGHT);\n  }\n\n\n  // perhaps in the future, eggs are able to talk as people\n  mute() { }\n\n  unmute() { }\n}\n\nmodule.exports = Egg;\n\n//# sourceURL=webpack:///./src/egg.js?");

/***/ }),

/***/ "./src/enemies/bat.js":
/*!****************************!*\
  !*** ./src/enemies/bat.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ../vector */ \"./src/vector.js\");\nconst Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemies/enemy.js\");\n\nconst SPRITE_SIZE = {\n  fly1: [46, 25],\n  fly2: [46, 25],\n  fly3: [44, 23],\n  fly4: [22, 23],\n  fly5: [22, 23],\n  fly6: [24, 24],\n  fly7: [44, 23],\n  hit1: [31, 21],\n  hit2: [31, 21],\n  hit3: [29, 23],\n  hit4: [27, 25],\n  hit5: [27, 27],\n};\n\nconst BACK_SPRITE_POS = {\n  fly1: [0, 3],\n  fly2: [46, 3],\n  fly3: [93, 4],\n  fly4: [150, 3],\n  fly5: [196, 2],\n  fly6: [241, 2],\n  fly7: [277, 3],\n  hit1: [7, 5],\n  hit2: [53, 5],\n  hit3: [100, 4],\n  hit4: [147, 3],\n  hit5: [193, 2],\n};\n\nconst FRONT_SPRITE_POS = {\n  fly1: [276, 3],\n  fly2: [230, 3],\n  fly3: [185, 4],\n  fly4: [150, 3],\n  fly5: [104, 2],\n  fly6: [57, 2],\n  fly7: [1, 3],\n  hit1: [192, 5],\n  hit2: [146, 5],\n  hit3: [101, 4],\n  hit4: [56, 3],\n  hit5: [10, 2],\n};\n\nconst CONSTANTS = {\n  TILE_SIZE: 50,\n  MAX_FRAME_COUNT: 6,\n  TICKS_PER_FRAME: 3,\n  RELOAD_TIME: 250, // in milliseconds\n  X_SPEED: 0.5,\n};\n\nclass Bat extends Enemy {\n  // Bat is constructed with a \"<\" or \">\" depending on which direction it starts flying\n  constructor(pos, char) {\n    super(pos, char);\n    this.frontFlySprites = new Image();\n    this.backFlySprites = new Image();\n    this.frontHitSprites = new Image();\n    this.backHitSprites = new Image();\n    this.frontFlySprites.src = './assets/sprites/pixel/enemies/Bat/front-fly.png';\n    this.backFlySprites.src = './assets/sprites/pixel/enemies/Bat/back-fly.png';\n    this.frontHitSprites.src = './assets/sprites/pixel/enemies/Bat/front-hit.png';\n    this.backHitSprites.src = './assets/sprites/pixel/enemies/Bat/back-hit.png';\n\n    this.char = char;\n    this.reloadTime = 2200; // custom reload time for bats\n\n    this.life = 1; // fragile dudes\n  }\n\n  static create(pos, char) {\n    return new Bat(pos, char);\n  }\n\n  get size() {\n    // bats are smaller targets!\n    return new Vector(0.75, 0.75);\n  }\n\n  step(timeStep, state) {\n    if (!this.reloading) this.shoot(state, 0, 0.04);\n    this.handleTurn(state);\n    this.handleFrames();\n    this.handleMovement(timeStep);\n  }\n\n  handleFrames() {\n    this.tickCount += 1;\n\n    if (this.tickCount > CONSTANTS.TICKS_PER_FRAME) {\n      this.tickCount = 0;\n      this.frameCount += 1;\n      if (this.frameCount > CONSTANTS.MAX_FRAME_COUNT) {\n        this.frameCount = 0;\n        if (this.isHit) this.finishGettingHit();\n      }\n    }\n  }\n\n  handleMovement(timeStep) {\n    const xVel = this.vel.x;\n    const xMoveTo = this.pos.plus(new Vector(xVel * timeStep, 0));\n    this.pos = xMoveTo;\n  }\n\n  handleTurn(state) {\n    if (!this.isMoving) return;\n    if ((state.player.pos.x - this.pos.x > 7 && this.vel.x < 0) \n      || (state.player.pos.x - this.pos.x < -7 && this.vel.x > 0)) {\n      this.vel.x = -this.vel.x\n      this.tickCount = 0;\n      this.frameCount = 0;\n    }\n  }\n\n  startMoving() {\n    if (this.isMoving) return;\n    this.isMoving = true;\n    if (this.char === \"<\") {\n      this.vel = new Vector(-CONSTANTS.X_SPEED, 0);\n    } else if (this.char === \">\") {\n      this.vel = new Vector(CONSTANTS.X_SPEED, 0);\n    }\n  }\n\n  draw(ctx, viewPortCenter) {\n    this.viewPortCenter = viewPortCenter;\n\n    if (!this.isHit && this.vel.x > 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['fly1'], SPRITE_SIZE['fly1'], this.frontFlySprites);\n        case 1:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['fly2'], SPRITE_SIZE['fly2'], this.frontFlySprites);\n        case 2:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['fly3'], SPRITE_SIZE['fly3'], this.frontFlySprites);\n        case 3:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['fly4'], SPRITE_SIZE['fly4'], this.frontFlySprites);\n        case 4:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['fly5'], SPRITE_SIZE['fly5'], this.frontFlySprites);\n        case 5:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['fly6'], SPRITE_SIZE['fly6'], this.frontFlySprites);\n        case 6:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['fly7'], SPRITE_SIZE['fly7'], this.frontFlySprites);\n      }\n    } else if (!this.isHit && this.vel.x < 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['fly1'], SPRITE_SIZE['fly1'], this.backFlySprites);\n        case 1:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['fly2'], SPRITE_SIZE['fly2'], this.backFlySprites);\n        case 2:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['fly3'], SPRITE_SIZE['fly3'], this.backFlySprites);\n        case 3:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['fly4'], SPRITE_SIZE['fly4'], this.backFlySprites);\n        case 4:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['fly5'], SPRITE_SIZE['fly5'], this.backFlySprites);\n        case 5:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['fly6'], SPRITE_SIZE['fly6'], this.backFlySprites);\n        case 6:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['fly7'], SPRITE_SIZE['fly7'], this.backFlySprites);\n      }\n    } else if (this.isHit && this.vel.x < 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.backHitSprites);\n        case 1:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.backHitSprites);\n        case 2:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.backHitSprites);\n        case 3:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.backHitSprites);\n        case 4:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.backHitSprites);\n        case 5:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.backHitSprites);\n        case 6:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.backHitSprites);\n      }\n    } else if (this.isHit && this.vel.x > 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.frontHitSprites);\n        case 1:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.frontHitSprites);\n        case 2:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.frontHitSprites);\n        case 3:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.frontHitSprites);\n        case 4:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.frontHitSprites);\n        case 5:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.frontHitSprites);\n        case 6:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.frontHitSprites);\n      }\n    }\n\n  }\n\n  selectSprite(ctx, coordinates, size, spritesImg) {\n    // [25, 25] is taken as the default sprite size for fat bird (tis just an estimate...)\n    const width = CONSTANTS.TILE_SIZE * this.size.x * size[0] / 25;\n    const height = CONSTANTS.TILE_SIZE * this.size.y * size[1] / 25;\n\n    // const extraHeight = -3;\n\n    const xOnScreen = 950 / 2 + 50 * (this.pos.x - this.viewPortCenter.x);\n    const yOnScreen = 450 / 2 + 50 * (this.pos.y - this.viewPortCenter.y);\n\n    ctx.drawImage(spritesImg,\n      coordinates[0], coordinates[1],\n      size[0], size[1],\n      xOnScreen, yOnScreen,\n      width, height);\n  }\n};\n\nmodule.exports = Bat;\n\n//# sourceURL=webpack:///./src/enemies/bat.js?");

/***/ }),

/***/ "./src/enemies/bullet.js":
/*!*******************************!*\
  !*** ./src/enemies/bullet.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ../vector */ \"./src/vector.js\");\n\nconst CONSTANTS = {\n  SPRITE_POS: [4, 4],\n  SPRITE_SIZE: [8, 8],\n  WIDTH: 10,\n  HEIGHT: 10,\n  SPEED: 0.3,\n};\n\n\nclass Bullet {\n  constructor(pos, vel) {\n    this.sprites = new Image();\n    this.sprites.src = './assets/sprites/pixel/bullet.png';\n\n    this.pos = pos;\n    this.vel = vel;\n  }\n\n  get type() {\n    return \"bullet\";\n  }\n\n  get size() {\n    return new Vector(0.2, 0.2);\n  }\n\n  handleMovement(timeStep) {\n    // movement for x-direction\n    const xMove = this.vel.x * timeStep;\n    let yMove = this.vel.y * timeStep;\n    this.pos = this.pos.plus(new Vector(xMove, yMove));\n\n    // velocity is constant for bullets, so no worries\n  }\n\n  step(timeStep) {\n    this.handleMovement(timeStep);\n  }\n\n  draw(ctx, viewPortCenter) {\n    const xOnScreen = 950 / 2 + 50 * (this.pos.x - viewPortCenter.x);\n    const yOnScreen = 450 / 2 + 50 * (this.pos.y - viewPortCenter.y);\n    ctx.drawImage(this.sprites,\n      CONSTANTS.SPRITE_POS[0], CONSTANTS.SPRITE_POS[1],\n      CONSTANTS.SPRITE_SIZE[0], CONSTANTS.SPRITE_SIZE[1],\n      xOnScreen, yOnScreen,\n      CONSTANTS.WIDTH, CONSTANTS.HEIGHT);\n  }\n\n  // bullets might talk one day, but this is needed because mute is handled per 'actor'\n  mute() {}\n  unmute() {}\n}\n\nmodule.exports = Bullet;\n\n//# sourceURL=webpack:///./src/enemies/bullet.js?");

/***/ }),

/***/ "./src/enemies/enemy.js":
/*!******************************!*\
  !*** ./src/enemies/enemy.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Bullet = __webpack_require__(/*! ./bullet */ \"./src/enemies/bullet.js\");\nconst Vector = __webpack_require__(/*! ../vector */ \"./src/vector.js\");\n\nconst CONSTANTS = {\n  BULLET_VEL: 0.4,\n};\n\nclass Enemy {\n  constructor(pos, char) {\n    this.pos = pos;\n    this.char = char;\n    this.vel = new Vector(0, 0); // until in viewport, no speed!\n    this.isHit = false; // for small invincibility frame upon being hit (as well as animation)\n    this.life = 1; // default, but enemies can have different amounts of lives\n    this.reloading = true;\n    setTimeout(() => this.reloading = false, 2000);\n    this.reloadTime = 3000; // adjust if enemy should shoot faster/slower\n    this.bulletVel = CONSTANTS.BULLET_VEL;\n    this.frameCount = 0;\n    this.tickCount = 0;\n    this.muted = false;\n    this.hitSound = new Audio('./assets/audio/enemy-hit.wav');\n    this.hitSound.volume = 0.5;\n    // maxFrames and ticksPerFrame may differ per enemy!\n\n    this.isMoving = false;\n    this.reload = this.reload.bind(this);\n  }\n  \n  get type() {\n    return \"enemy\";\n  }\n\n  shoot(state, extraWidth, extraHeight) {\n    const moreX = extraWidth || 0;\n    const moreY = extraHeight || 0;\n\n    if (this.isMoving && !this.reloading && !this.isHit) {\n      const direction = state.player.pos.minus(this.pos);\n      const bullet = new Bullet(new Vector(this.pos.x + moreX, this.pos.y + moreY), direction.scale(this.bulletVel));\n      state.actors.push(bullet);\n      this.reloading = true;\n      setTimeout(() => {\n        this.reload();\n      }, this.reloadTime);\n    }\n  }\n\n  reload() {\n    this.reloading = false;\n  }\n\n  startMoving() {\n    // this method will be used for most enemies, might as well have a default!\n  }\n\n  considerTurning() {\n    // this method will be used for most enemies, might as well have a default!\n  }\n\n  mute() {\n    this.muted = true;\n  }\n\n  unmute() {\n    this.muted = false;\n  }\n\n  getHit() {\n    this.tickCount = 0;\n    this.frameCount = 0;\n    this.isHit = true;\n    this.isMoving = false; // this is usually set to true when the enemy comes within the viewport\n    if (!this.muted) {\n      this.hitSound.currentTime = 0.2;\n      this.hitSound.play();\n    }\n    // this.life is decremented in the below function, since the animation must happen first!\n  }\n\n  finishGettingHit() {\n    this.isHit = false;\n    this.life -= 1;\n    if (this.life < 0) this.life = 0; // Just in case there's a bug LOL.\n  }\n\n  step(timeStep, state) {\n    this.handleFrames();\n    this.handleMovement(timeStep, state);\n  }\n}\n\nmodule.exports = Enemy;\n\n//# sourceURL=webpack:///./src/enemies/enemy.js?");

/***/ }),

/***/ "./src/enemies/fat_bird.js":
/*!*********************************!*\
  !*** ./src/enemies/fat_bird.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ../vector */ \"./src/vector.js\");\nconst Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemies/enemy.js\");\n\n// This is a useless enemy that does not move, be careful not to walk into it though!\n\nconst CONSTANTS = {\n  WIDTH: 50,\n  HEIGHT: 70,\n  TILE_SIZE: 50,\n  TICKS_PER_FRAME: 2,\n  MAX_FRAME_COUNT: 15,\n};\n\nconst SPRITE_POS = {\n  idle1: [2, 5],\n  idle2: [42, 4],\n  idle3: [84, 3],\n  idle4: [124, 3],\n  idle5: [161, 7],\n  idle6: [201, 8],\n  idle7: [241, 8],\n  idle8: [281, 7],\n  hit1: [0, 10],\n  hit2: [40, 10],\n  hit3: [81, 8],\n  hit4: [122, 6],\n  hit5: [162, 5],\n};\n\nconst SPRITE_SIZE = {\n  idle1: [35, 39],\n  idle2: [35, 42],\n  idle3: [31, 45],\n  idle4: [31, 45],\n  idle5: [37, 35],\n  idle6: [37, 32],\n  idle7: [37, 32],\n  idle8: [37, 35],\n  hit1: [39, 31],\n  hit2: [39, 31],\n  hit3: [37, 34],\n  hit4: [35, 37],\n  hit5: [35, 39],\n};\n\nclass FatBird extends Enemy {\n  constructor(pos) {\n    super(pos);\n    this.idleSprites = new Image();\n    this.hitSprites = new Image();\n    this.idleSprites.src = './assets/sprites/pixel/enemies/FatBird/idle.png';\n    this.hitSprites.src = './assets/sprites/pixel/enemies/FatBird/hit.png';\n    this.reloadTime = 6000;\n\n    this.life = 2;\n\n    this.maxFrameCount = CONSTANTS.MAX_FRAME_COUNT;\n    this.ticksPerFrame = CONSTANTS.TICKS_PER_FRAME;\n  }\n\n  static create(pos) {\n    return new FatBird(pos);\n  }\n\n  get size() {\n    // fat bird is one tile size!\n    return new Vector(1, 1);\n  }\n\n  startMoving() {\n    if (this.isMoving) return;\n    this.isMoving = true;\n  }\n\n  handleFrames() {\n    this.tickCount += 1;\n\n    if (this.tickCount > this.ticksPerFrame) {\n      this.tickCount = 0;\n      this.frameCount += 1;\n      if (this.frameCount === this.maxFrameCount) {\n        this.frameCount = 0;\n        if (this.isHit) this.finishGettingHit();\n      }\n    }\n  }\n\n  // The fat bird is a useless enemy, so no movement needs to be handled!\n  step(_, state) {\n    if (!this.reloading) this.shoot(state, 0, 0.4);\n    this.handleFrames();\n    // this.handleMovement();\n  }\n\n  draw(ctx, viewPortCenter) {\n    this.viewPortCenter = viewPortCenter;\n\n    if (!this.isHit) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, SPRITE_POS['idle1'], SPRITE_SIZE['idle1'], this.idleSprites);\n        case 1:\n          return this.selectSprite(ctx, SPRITE_POS['idle1'], SPRITE_SIZE['idle1'], this.idleSprites);\n        case 2:\n          return this.selectSprite(ctx, SPRITE_POS['idle2'], SPRITE_SIZE['idle2'], this.idleSprites);\n        case 3:\n          return this.selectSprite(ctx, SPRITE_POS['idle2'], SPRITE_SIZE['idle2'], this.idleSprites);\n        case 4:\n          return this.selectSprite(ctx, SPRITE_POS['idle3'], SPRITE_SIZE['idle3'], this.idleSprites);\n        case 5:\n          return this.selectSprite(ctx, SPRITE_POS['idle3'], SPRITE_SIZE['idle3'], this.idleSprites);\n        case 6:\n          return this.selectSprite(ctx, SPRITE_POS['idle4'], SPRITE_SIZE['idle4'], this.idleSprites);\n        case 7:\n          return this.selectSprite(ctx, SPRITE_POS['idle4'], SPRITE_SIZE['idle4'], this.idleSprites);\n        case 8:\n          return this.selectSprite(ctx, SPRITE_POS['idle5'], SPRITE_SIZE['idle5'], this.idleSprites);\n        case 9:\n          return this.selectSprite(ctx, SPRITE_POS['idle5'], SPRITE_SIZE['idle5'], this.idleSprites);\n        case 10:\n          return this.selectSprite(ctx, SPRITE_POS['idle6'], SPRITE_SIZE['idle6'], this.idleSprites);\n        case 11:\n          return this.selectSprite(ctx, SPRITE_POS['idle6'], SPRITE_SIZE['idle6'], this.idleSprites);\n        case 12:\n          return this.selectSprite(ctx, SPRITE_POS['idle7'], SPRITE_SIZE['idle7'], this.idleSprites);\n        case 13:\n          return this.selectSprite(ctx, SPRITE_POS['idle7'], SPRITE_SIZE['idle7'], this.idleSprites);\n        case 14:\n          return this.selectSprite(ctx, SPRITE_POS['idle8'], SPRITE_SIZE['idle8'], this.idleSprites);\n        case 15:\n          return this.selectSprite(ctx, SPRITE_POS['idle8'], SPRITE_SIZE['idle8'], this.idleSprites);\n      }\n    } else {\n      if ([0, 1, 10, 15].includes(this.frameCount)) {\n        return this.selectSprite(ctx, SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.hitSprites);\n      } else if ([2, 3, 11].includes(this.frameCount)) {\n        return this.selectSprite(ctx, SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.hitSprites);\n      } else if ([4, 5, 12].includes(this.frameCount)) {\n        return this.selectSprite(ctx, SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.hitSprites);\n      } else if ([6, 7, 13].includes(this.frameCount)) {\n        return this.selectSprite(ctx, SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.hitSprites);\n      } else if ([8, 9, 14].includes(this.frameCount)) {\n        return this.selectSprite(ctx, SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.hitSprites);\n      } \n    }\n  }\n\n  selectSprite(ctx, coordinates, size, spritesImg) {\n    // [35, 35] is taken as the default sprite size for fat bird (tis just an estimate...)\n    const width = CONSTANTS.TILE_SIZE * this.size.x * size[0] / 35;\n    const height = CONSTANTS.TILE_SIZE * this.size.y * size[1] / 35;\n\n    // const extraHeight = -3;\n\n    const xOnScreen = 950 / 2 + 50 * (this.pos.x - this.viewPortCenter.x);\n    const yOnScreen = 450 / 2 + 50 * (this.pos.y - this.viewPortCenter.y); // + extraHeight;\n\n    ctx.drawImage(spritesImg,\n      coordinates[0], coordinates[1],\n      size[0], size[1],\n      xOnScreen, yOnScreen,\n      width, height);\n  }\n};\n\nmodule.exports = FatBird;\n\n//# sourceURL=webpack:///./src/enemies/fat_bird.js?");

/***/ }),

/***/ "./src/enemies/slime.js":
/*!******************************!*\
  !*** ./src/enemies/slime.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ../vector */ \"./src/vector.js\");\nconst Enemy = __webpack_require__(/*! ./enemy */ \"./src/enemies/enemy.js\");\n\nconst SPRITE_SIZE = {\n  walk1: [38, 26],\n  walk2: [40, 25],\n  walk3: [42, 23],\n  walk4: [42, 23],\n  walk5: [40, 24],\n  walk6: [38, 26],\n  walk7: [36, 28],\n  walk8: [34, 30],\n  walk9: [34, 30],\n  walk10: [36, 28],\n  hit1: [44, 19],\n  hit2: [44, 19],\n  hit3: [42, 22],\n  hit4: [40, 24],\n  hit5: [38, 26],\n};\n\nconst BACK_SPRITE_POS = {\n  walk1: [3, 4],\n  walk2: [46, 5],\n  walk3: [89, 7],\n  walk4: [133, 7],\n  walk5: [178, 6],\n  walk6: [223, 4],\n  walk7: [268, 2],\n  walk8: [313, 0],\n  walk9: [357, 0],\n  walk10: [400, 2],\n  hit1: [0, 11],\n  hit2: [44, 11],\n  hit3: [89, 8],\n  hit4: [134, 6],\n  hit5: [179, 4],\n};\n\nconst FRONT_SPRITE_POS = {\n  walk1: [399, 4],\n  walk2: [354, 5],\n  walk3: [309, 7],\n  walk4: [265, 7],\n  walk5: [222, 6],\n  walk6: [179, 4],\n  walk7: [136, 2],\n  walk8: [93, 0],\n  walk9: [49, 0],\n  walk10: [4, 2],\n  hit1: [176, 11],\n  hit2: [132, 11],\n  hit3: [89, 8],\n  hit4: [46, 6],\n  hit5: [3, 4],\n};\n\nconst CONSTANTS = {\n  TILE_SIZE: 50,\n  MAX_FRAME_COUNT: 9,\n  TICKS_PER_FRAME: 4,\n  RELOAD_TIME: 250, // in milliseconds\n  X_SPEED: 0.3,\n  GRAVITY: 0.29,\n  FRAMES_BEFORE_TURNING: 20\n};\n\nclass Slime extends Enemy {\n  constructor(pos, char) {\n    super(pos, char);\n    this.pos = pos.plus(new Vector(0, 0.375));\n    this.frontWalkSprites = new Image();\n    this.backWalkSprites = new Image();\n    this.frontHitSprites = new Image();\n    this.backHitSprites = new Image();\n    this.frontWalkSprites.src = './assets/sprites/pixel/enemies/Slime/front-walk.png';\n    this.backWalkSprites.src = './assets/sprites/pixel/enemies/Slime/back-walk.png';\n    this.frontHitSprites.src = './assets/sprites/pixel/enemies/Slime/front-hit.png';\n    this.backHitSprites.src = './assets/sprites/pixel/enemies/Slime/back-hit.png';\n    this.vel = new Vector(-CONSTANTS.X_SPEED, 0);\n    this.life = 2;\n  }\n\n  static create(pos, char) {\n    return new Slime(pos, char);\n  }\n\n  get size() {\n    return new Vector(1, 0.625);\n  }\n\n  startMoving() {\n    if (this.isMoving) return;\n    this.isMoving = true;\n    this.vel = new Vector(-CONSTANTS.X_SPEED, 0);\n  }\n\n  step(timeStep, state) {\n    //if (!this.reloading) this.shoot(state, 0, 0.04);\n    this.handleTurn(timeStep, state);\n    this.handleFrames();\n    this.handleMovement(timeStep);\n  }\n\n  handleFrames() {\n    this.tickCount += 1;\n\n    if (this.tickCount > CONSTANTS.TICKS_PER_FRAME) {\n      this.tickCount = 0;\n      this.frameCount += 1;\n      if (this.frameCount > CONSTANTS.MAX_FRAME_COUNT) {\n        this.frameCount = 0;\n        if (this.isHit) this.finishGettingHit();\n      }\n    }\n  }\n\n  handleMovement(timeStep) {\n    if (this.isMoving) {\n      const xVel = this.vel.x;\n      const xMoveTo = this.pos.plus(new Vector(xVel * timeStep, 0));\n      this.pos = xMoveTo;\n    }\n  }\n\n  // slimes turn on edges\n  handleTurn(timeStep, state) {\n    if (!this.isMoving) return;\n\n    const xVel = this.vel.x;\n    const xMoveTo = this.pos.plus(new Vector(xVel * timeStep * CONSTANTS.FRAMES_BEFORE_TURNING, 0));\n    const willTouchGround = state.level.touches(xMoveTo.plus(new Vector(0, 1/50)), this.size, \"tile\");\n\n    if (state.level.touches(xMoveTo, this.size, \"wall\") \n      || state.level.touches(xMoveTo, this.size, \"tile\")\n      || !willTouchGround) {\n      this.vel.x = -this.vel.x;\n      this.tickCount = 0;\n      this.frameCount = 0;\n    }\n  }\n\n  startMoving() {\n    if (this.isMoving) return;\n    this.isMoving = true;\n  }\n\n  draw(ctx, viewPortCenter) {\n    this.viewPortCenter = viewPortCenter;\n\n    if (!this.isHit && this.vel.x > 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk1'], SPRITE_SIZE['walk1'], this.frontWalkSprites);\n        case 1:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk2'], SPRITE_SIZE['walk2'], this.frontWalkSprites);\n        case 2:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk3'], SPRITE_SIZE['walk3'], this.frontWalkSprites);\n        case 3:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk4'], SPRITE_SIZE['walk4'], this.frontWalkSprites);\n        case 4:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk5'], SPRITE_SIZE['walk5'], this.frontWalkSprites);\n        case 5:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk6'], SPRITE_SIZE['walk6'], this.frontWalkSprites);\n        case 6:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk7'], SPRITE_SIZE['walk7'], this.frontWalkSprites);\n        case 7:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk8'], SPRITE_SIZE['walk8'], this.frontWalkSprites);\n        case 8:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk9'], SPRITE_SIZE['walk9'], this.frontWalkSprites);\n        case 9:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk10'], SPRITE_SIZE['walk10'], this.frontWalkSprites);\n      }\n    } else if (!this.isHit && this.vel.x < 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk1'], SPRITE_SIZE['walk1'], this.backWalkSprites);\n        case 1:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk2'], SPRITE_SIZE['walk2'], this.backWalkSprites);\n        case 2:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk3'], SPRITE_SIZE['walk3'], this.backWalkSprites);\n        case 3:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk4'], SPRITE_SIZE['walk4'], this.backWalkSprites);\n        case 4:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk5'], SPRITE_SIZE['walk5'], this.backWalkSprites);\n        case 5:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk6'], SPRITE_SIZE['walk6'], this.backWalkSprites);\n        case 6:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk7'], SPRITE_SIZE['walk7'], this.backWalkSprites);\n        case 7:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk8'], SPRITE_SIZE['walk8'], this.backWalkSprites);\n        case 8:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk9'], SPRITE_SIZE['walk9'], this.backWalkSprites);\n        case 9:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk10'], SPRITE_SIZE['walk10'], this.backWalkSprites);\n      }\n    } else if (this.isHit && this.vel.x < 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.backHitSprites);\n        case 1:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.backHitSprites);\n        case 2:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.backHitSprites);\n        case 3:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.backHitSprites);\n        case 4:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.backHitSprites);\n        case 5:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.backHitSprites);\n        case 6:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.backHitSprites);\n        case 7:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.backHitSprites);\n        case 8:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.backHitSprites);\n        case 9:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.backHitSprites);\n      }\n    } else if (this.isHit && this.vel.x > 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.frontHitSprites);\n        case 1:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.frontHitSprites);\n        case 2:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.frontHitSprites);\n        case 3:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.frontHitSprites);\n        case 4:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.frontHitSprites);\n        case 5:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.frontHitSprites);\n        case 6:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.frontHitSprites);\n        case 7:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.frontHitSprites);\n        case 8:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.frontHitSprites);\n        case 9:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.frontHitSprites);\n      }\n    }\n\n  }\n\n  selectSprite(ctx, coordinates, size, spritesImg) {\n    const width = CONSTANTS.TILE_SIZE * this.size.x * size[0] / 40;\n    const height = CONSTANTS.TILE_SIZE * this.size.y * size[1] / 25;\n\n    const extraHeight = 3;\n    const xOnScreen = 950 / 2 + 50 * (this.pos.x - this.viewPortCenter.x);\n    const yOnScreen = 450 / 2 + 50 * (this.pos.y - this.viewPortCenter.y) + (25-size[1] + 5);\n\n    ctx.drawImage(spritesImg,\n      coordinates[0], coordinates[1],\n      size[0], size[1],\n      xOnScreen, yOnScreen,\n      width, height);\n  }\n};\n\nmodule.exports = Slime;\n\n//# sourceURL=webpack:///./src/enemies/slime.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//const Game = require(\"./game.js\");\nconst Level = __webpack_require__(/*! ./level.js */ \"./src/level.js\");\nconst StartScreen = __webpack_require__(/*! ./start/screen */ \"./src/start/screen.js\");\nconst { GAME_LEVELS, MUSIC_LIST } = __webpack_require__(/*! ./levels */ \"./src/levels.js\");\n\nconst CONSTANTS = {\n  TIME: 0.1,\n  HEIGHT: 450,\n  WIDTH: 950,\n};\n\nclass Game {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.playing = false;\n    this.lost = false;\n    this.won = false;\n    this.paused = false;\n    this.muted = false;\n    this.victoryMusic = new Audio('./assets/audio/victory.wav');\n    this.victoryMusic.volume = 0.2;\n    this.defeatMusic = new Audio('./assets/audio/gameover.wav');\n    this.defeatMusic.volume = 0.2;\n    this.currentLevel = undefined; // default but changes;\n    this.render = this.render.bind(this);\n    this.step = this.step.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.selectLevel = this.selectLevel.bind(this);\n    this.pause = this.pause.bind(this);\n    this.mute = this.mute.bind(this);\n\n    // prevent scrolling on window with space or arrow keys!\n    window.addEventListener(\"keydown\", function (e) {\n      if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {\n        e.preventDefault();\n      }\n    }, false);\n\n    this.startScreen = new StartScreen(this.selectLevel);\n  }\n\n  selectLevel(level, music) {\n    this.currentLevel = new Level(level, music);\n    this.won = false;\n    this.lost = false;\n    if (this.muted) this.currentLevel.mute();\n    this.playing = true;\n    this.render();\n  }\n\n  mute() {\n    const button = document.getElementById(\"mute\");\n    if (this.playing && !this.muted && !this.lost && !this.won) {\n      this.muted = true;\n      this.currentLevel.mute();\n      button.classList.remove(\"fa-volume-down\");\n      button.classList.add(\"fa-volume-mute\");\n    } else if (this.playing && this.muted && !this.lost && !this.won) {\n      this.muted = false;\n      this.currentLevel.unmute();\n      button.classList.remove(\"fa-volume-mute\");\n      button.classList.add(\"fa-volume-down\");\n    }\n  }\n\n  pause() {\n    const button = document.getElementById(\"pause\");\n    if (this.playing && !this.paused && !this.lost && !this.won) {\n      this.paused = true;\n      this.currentLevel.mute()\n      button.classList.remove(\"fa-play\");\n      button.classList.add(\"fa-pause\");\n    } else if (this.playing && this.paused && !this.lost && !this.won) {\n      this.paused = false;\n      if (!this.muted) this.currentLevel.unmute();\n      button.classList.remove(\"fa-pause\");\n      button.classList.add(\"fa-play\");\n      this.render();\n    }\n  }\n\n  celebrateWin() {\n    this.playing = false;\n    this.currentLevel.mute();\n    if (!this.muted) {\n      this.victoryMusic.currentTime = 0;\n      this.victoryMusic.play();\n    }\n    const screen = document.getElementById(\"victory-screen\");\n    screen.style.display = \"flex\";\n    console.log(\"You win!\");\n  }\n\n  mournLoss() {\n    this.playing = false;\n    this.currentLevel.mute();\n    if (!this.muted) {\n      this.defeatMusic.currentTime = 0;\n      this.defeatMusic.play();\n    }\n    const screen = document.getElementById(\"defeat-screen\");\n    screen.style.display = \"flex\";\n    console.log(\"You lose :(\");\n  }\n\n  start() {\n    this.bindKeyHandlers();\n    this.bindClickHandlers();\n    // this.render();\n  }\n\n  step() {\n    if (key.getScope() === 'main') {\n      if ((!key.isPressed('left') && !key.isPressed('right')) || (key.isPressed('left') && key.isPressed('right'))) {\n        this.currentLevel.player.moveTo(0);\n      }\n      if ((!key.isPressed('up') && !key.isPressed('down')) || (key.isPressed('up') && key.isPressed('down'))) {\n        this.currentLevel.player.lookVertically(0);\n      }\n    } else if (key.getScope() === 'alt') {\n      if ((!key.isPressed('a') && !key.isPressed('d')) || (key.isPressed('a') && key.isPressed('d'))) {\n        this.currentLevel.player.moveTo(0);\n      }\n      if ((!key.isPressed('w') && !key.isPressed('s')) || (key.isPressed('w') && key.isPressed('s'))) {\n        this.currentLevel.player.lookVertically(0);\n      }  \n    }\n\n    if (this.currentLevel.won) { \n      this.won = true;\n      this.celebrateWin();\n    };\n    if (this.currentLevel.lost) {\n      this.lost = true;\n      this.mournLoss();\n    };\n    this.currentLevel.step(CONSTANTS.TIME);\n    this.currentLevel.draw(this.ctx);\n  }\n\n  render() {\n    if (!this.won && !this.lost && !this.paused) {\n      requestAnimationFrame(this.render);\n      this.step();\n    }\n  }\n\n  handleClick(e) {\n    // This function was made when considering a Canvas based game-start UI.\n    // But a DOM UI will work just fine (since this app is mostly for use on a browser!)\n    // const canvas = document.getElementById(\"canvas\");\n    // const mouseX = e.pageX - canvas.offsetLeft;\n    // const mouseY = e.pageY - canvas.offsetTop;\n    // if (mouseX >= 0 && mouseX <= CONSTANTS.WIDTH && mouseY >= 0 && mouseY <= CONSTANTS.HEIGHT) {\n    //   console.log(mouseX, mouseY); \n    // }\n  }\n\n  bindClickHandlers() {\n    const pauseButton = document.getElementById(\"pause\");\n    const muteButton = document.getElementById(\"mute\");\n    pauseButton.onclick = () => this.pause();\n    muteButton.onclick = () => this.mute();\n  }\n\n  bindKeyHandlers() {\n    key('left', 'main', () => { if (this.playing) this.currentLevel.state.player.moveTo(-1) });\n    key('right', 'main', () => { if (this.playing) this.currentLevel.state.player.moveTo(1) });\n    key('up', 'main', () => {\n      if (!this.playing) return; \n      this.currentLevel.state.player.checkDoor(this.currentLevel.state); \n      this.currentLevel.state.player.lookVertically(1) \n    });\n    key('z', 'main', () => { if (this.playing) this.currentLevel.state.player.jump() });\n    key('x', 'main', () => {\n      if (!this.playing) return; \n      if (!key.isPressed(\"up\")) {\n        this.currentLevel.state.player.shoot(this.currentLevel.state);\n      } else {\n        this.currentLevel.state.player.shootUp(this.currentLevel.state);\n      }\n    });\n\n    key('a', 'alt', () => { if (this.playing) this.currentLevel.state.player.moveTo(-1) });\n    key('d', 'alt', () => { if (this.playing) this.currentLevel.state.player.moveTo(1) });\n    key('w', 'alt', () => {\n      if (!this.playing) return;\n      this.currentLevel.state.player.checkDoor(this.currentLevel.state);\n      this.currentLevel.state.player.lookVertically(1)\n    });\n    key('l', 'alt', () => { if (this.playing) this.currentLevel.state.player.jump() });\n    key('k', 'alt', () => {\n      if (!this.playing) return;\n      if (!key.isPressed(\"up\")) {\n        this.currentLevel.state.player.shoot(this.currentLevel.state);\n      } else {\n        this.currentLevel.state.player.shootUp(this.currentLevel.state);\n      }\n    });\n\n    // these are global\n    key('p', () => this.pause());\n    key('m', () => this.mute());\n\n    key.setScope('main');\n    document.addEventListener(\"click\", this.handleClick, false);\n  }\n}\n\nmodule.exports = Game;\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Player = __webpack_require__(/*! ./player.js */ \"./src/player.js\");\nconst Game = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext('2d');\n  ctx.imageSmoothingEnabled = false;\n  const gameView = new Game(ctx);\n  gameView.start();\n\n  // const player = new Player({ pos:[0,0], vel:[0,0] });\n  // player.render(ctx);\n});\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/level.js":
/*!**********************!*\
  !*** ./src/level.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// credit to https://eloquentjavascript.net/16_game.html\n// for both the code example and excellent writing\nconst Tile = __webpack_require__(/*! ./tile.js */ \"./src/tile.js\");\nconst Player = __webpack_require__(/*! ./player.js */ \"./src/player.js\");\nconst Door = __webpack_require__(/*! ./door.js */ \"./src/door.js\");\nconst Vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\nconst State = __webpack_require__(/*! ./level_state */ \"./src/level_state.js\");\n\n// enemies here\nconst FatBird = __webpack_require__(/*! ./enemies/fat_bird */ \"./src/enemies/fat_bird.js\");\nconst Bat = __webpack_require__(/*! ./enemies/bat */ \"./src/enemies/bat.js\");\nconst Slime = __webpack_require__(/*! ./enemies/slime */ \"./src/enemies/slime.js\");\n\nconst CONSTANTS = {\n  DIM_X: 950,\n  DIM_Y: 450,\n  VIEWPORT_WIDTH: 19,\n  VIEWPORT_HEIGHT: 9,\n  VECT_TO_CENTER: new Vector(950/50/2, 450/50/2), // this is from the top left of the viewport\n};\n\nconst levelChars = {\n  \"@\": Player,\n  \"#\": Tile,\n  \"$\": Tile,\n  \"D\": Door,\n  \".\": \"empty\",\n  \"F\": FatBird,\n  \"<\": Bat,\n  \">\": Bat,\n  \"S\": Slime,\n};\n\nclass Level {\n  constructor(plan, music) {\n    this.won = false;\n    this.lost = false;\n    this.background = new Image();\n    this.background.src = './assets/sprites/background.png';\n    this.music = music;\n    this.music.loop = true;\n    this.music.currentTime = 0;\n    this.music.volume = 0.2;\n    this.muted = false;\n    this.status = \"playing\";\n    this.actors = [];\n    this.tiles = [];\n    \n    let rows = plan.trim().split(\"\\n\").map(l => [...l]);\n    this.height = rows.length;\n    this.width = rows[0].length;\n    \n    let playerCount = 0;\n    let doorCount = 0;\n    this.rows = rows.map((row, y) => {\n      return row.map((ch, x) => {\n        let type = levelChars[ch];\n        if (typeof type === \"string\") return type;\n        if (type === Tile) {\n          const newTile = type.create(new Vector(x, y), ch);\n          this.tiles.push(newTile);\n          return newTile; \n        }\n        // It's either a tile, or an actor\n        const newActor = type.create(new Vector(x, y), ch);\n        if (newActor.type === \"player\") {\n          this.player = newActor;\n          playerCount += 1;\n        } else if (newActor.type === \"door\") {\n          doorCount += 1;\n        }\n        this.actors.push(\n          newActor);\n        return \"empty\";\n      });\n    });\n\n    if (playerCount !== 1) throw new Error('Every level must have exactly one player!');\n    if (doorCount !== 1) throw new Error('Every level must have exactly one door!');\n    this.scrollPlayerIntoView.bind(this)();\n\n    // Bound functions\n    this.inViewPort = this.inViewPort.bind(this);\n    this.win = this.win.bind(this);\n    this.lose = this.lose.bind(this);\n    this.state = State.start(this);\n    this.music.play();\n  }\n\n  win() {\n    this.won = true;\n  }\n\n  lose() {\n    this.lost = true;\n  }\n\n  mute() {\n    this.music.pause();\n    this.state.actors.forEach(actor => actor.mute());\n  }\n\n  unmute() {\n    this.music.play();\n    this.state.actors.forEach(actor => actor.unmute());\n  }\n\n  step(timeStep) {\n\n    // Step for player\n    this.state.actors.forEach(actor => {\n      if (actor.type === \"player\") {\n        this.state.player.step(timeStep, this.state);\n\n        // move viewport if needed\n        if (this.state.player.pos.x > this.viewPortCenter.x + 3) {\n          this.viewPortCenter.x = this.state.player.pos.x - 3;\n        } else if (this.player.pos.x < this.viewPortCenter.x - 3) {\n          this.viewPortCenter.x = this.state.player.pos.x + 3;\n        }\n    \n        if (this.state.player.pos.y > this.viewPortCenter.y + 2) {\n          this.viewPortCenter.y = this.state.player.pos.y - 2;\n        } else if (this.state.player.pos.y < this.viewPortCenter.y - 2) {\n          this.viewPortCenter.y = this.state.player.pos.y + 2;\n        }\n\n        let hitOnce = false;\n\n        // check if enemy hit player\n        this.state.enemies.forEach(enemy => {\n          if (!hitOnce && this.overlap(this.state.player, enemy) && !this.state.player.isHit && !enemy.isHit) {\n            const xDiff = this.state.player.pos.x - enemy.pos.x;\n            const recoilVel = xDiff/Math.abs(xDiff) * 0.3;\n            this.state.player.getHit(new Vector(recoilVel, 0.1), this.state);\n            hitOnce = true;\n          };\n        });\n\n      // For eggs\n      } else if (actor.type === \"egg\") {\n        actor.step(timeStep, this.state);\n\n        // This will remove the eggs that go far out of bounds\n        let isOutside = actor.pos.x < 0 - 7 || actor.pos.x > this.width + 7 ||\n          actor.pos.y < 0 - 3 || actor.pos.y > this.height + 3; // more generous with y bounds\n\n        if (isOutside) {\n          this.state.remove(actor);\n        } else {\n          // Check collisions with existing enemies\n          let hitOne = false;\n          this.state.enemies.forEach(enemy => {\n            if (!hitOne && this.overlap(actor, enemy) && !enemy.isHit) { \n              this.state.remove(actor)\n              enemy.getHit();\n              hitOne = true;\n            };\n          });\n        }\n      } else if (actor.type === \"bullet\") {\n        actor.step(timeStep, this.state);\n        // This will remove the bullets that go far out of bounds\n        let isOutside = actor.pos.x < 0 - 7 || actor.pos.x > this.width + 7 ||\n          actor.pos.y < 0 - 3 || actor.pos.y > this.height + 3; // more generous with y bounds\n\n        if (isOutside) {\n          this.state.remove(actor);\n        } else {\n          // Check collisions with the player\n          if (this.overlap(actor, this.state.player)) {\n            const xDiff = this.state.player.pos.x - actor.pos.x;\n            const recoilVel = xDiff / Math.abs(xDiff) * 0.3;\n            this.state.remove(actor);\n            this.state.player.getHit(new Vector(recoilVel, 0.1), this.state);\n          }\n        }\n      } else if (actor.type === \"enemy\") {\n        actor.step(timeStep, this.state);\n        if (actor.life === 0)  this.state.remove(actor); // they ded\n\n\n\n        // non-egg or player actors\n      } else {\n        actor.step(timeStep, this.state);\n      }\n    })\n\n    // update life\n    this.state.life.step();\n    if (this.state.life.value === 0) this.lose();\n\n    // check if enemies are left\n    if (!this.state.enemiesExist) this.state.door.open();\n  }\n\n  draw(ctx) {\n    ctx.clearRect(0, 0, CONSTANTS.DIM_X, CONSTANTS.DIM_Y);\n    ctx.drawImage(this.background, 0, 0, CONSTANTS.DIM_X, CONSTANTS.DIM_Y);\n    // this function should draw the viewport!\n    this.tiles.forEach(tile => {\n      if (this.inViewPort(tile)) {\n        tile.draw(ctx, this.viewPortCenter);\n      };\n    });\n\n    // door draws first!\n    this.state.door.draw(ctx, this.viewPortCenter);\n\n    this.state.actors.forEach(actor => {\n      if (this.inViewPort(actor) && actor.type !== \"door\") {\n        if (actor.type === \"enemy\") actor.startMoving(); // start moving when coming in viewport!\n        actor.draw(ctx, this.viewPortCenter);\n      };\n    });\n\n    // life is over everything else, so it draws last.\n    this.state.life.draw(ctx);\n  }\n\n  scrollPlayerIntoView() {\n    this.viewPortCenter = this.player.pos.plus(new Vector(0, -1.5));\n  }\n\n  inViewPort(element) {\n    const distance = this.viewPortCenter.distanceFrom(element.pos);\n    return (\n      distance.x < CONSTANTS.VIEWPORT_WIDTH / 2 + element.size.x \n      || distance.y > CONSTANTS.VIEWPORT_HEIGHT / 2 + element.size.y\n    );\n  }\n\n  overlap(actor1, actor2) {\n    return actor1.pos.x + actor1.size.x > actor2.pos.x &&\n      actor1.pos.x < actor2.pos.x + actor2.size.x &&\n      actor1.pos.y + actor1.size.y > actor2.pos.y &&\n      actor1.pos.y < actor2.pos.y + actor2.size.y;\n  }\n\n  touches(pos, size, type) {\n    const xStart = Math.floor(pos.x);\n    const xEnd = Math.ceil(pos.x + size.x);\n    const yStart = Math.floor(pos.y);\n    const yEnd = Math.ceil(pos.y + size.y);\n\n    for (let y = yStart; y < yEnd; y++) {\n      for (let x = xStart; x < xEnd; x++) {\n        // Anything outside is treated as a wall, according to the source\n        let isOutside = x < 0 || x >= this.width ||\n          y < 0 || y >= this.height;\n        let here = isOutside ? \"wall\" : this.rows[y][x].type;\n        if (here === type) return true;\n      }\n    }\n    return false;\n  }\n}\n\nmodule.exports = Level;\n\n//# sourceURL=webpack:///./src/level.js?");

/***/ }),

/***/ "./src/level_state.js":
/*!****************************!*\
  !*** ./src/level_state.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Life = __webpack_require__(/*! ./life */ \"./src/life.js\");\n\nclass State {\n  constructor(level, actors, status) {\n    this.level = level;\n    this.actors = actors;\n    this.status = status;\n    this.life = new Life();\n    this.win = false;\n    this.lose = false;\n    \n    // tiles don't need to be in state because they don't change (yet...)\n  }\n\n  static start(level) {\n    return new State(level, level.actors, \"playing\");\n  }\n\n  get player() {\n    return this.actors.find(a => a.type === \"player\");\n  }\n\n  get door() {\n    return this.actors.find(a => a.type === \"door\");\n  }\n\n  get enemies() {\n    return this.actors.filter(a => a.type === \"enemy\");\n  }\n\n  get enemiesExist() {\n    return this.actors.some(a => a.type === \"enemy\");\n  }\n\n  remove(actor) {\n    this.actors = this.actors.filter(a => {\n      const same = a === actor\n      return !same;\n    });\n  }\n}\n\nmodule.exports = State;\n\n//# sourceURL=webpack:///./src/level_state.js?");

/***/ }),

/***/ "./src/levels.js":
/*!***********************!*\
  !*** ./src/levels.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const GAME_LEVELS = [\n`\n...........................................................\n...........................................................\n...........................................................\n.......>...................................................\n.....................F.....................................\n............F.................................<............\n..................######...................................\n...@......#####............................................\n##########$$$$$...............####.....................D...\n$$$$$$$$$$$$$$$###############$$$$#########################\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n`,\n\n`\n...........................................................\n...............................................D...........\n.............................................#####.........\n................................F..........#...............\n..................................#######..................\n............F.......S.....#####............................\n..................######...................................\n...@..........#............................................\n##########.................................................\n$$$$$$$$$$#################################################\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n`,\n\n`\n...........................................................\n...........................................................\n...........................................................\n...........................................................\n...........................................................\n....<..>................................<...>..............\n...........................................................\n...F........F....##........................F...........F...\n...............##$$##........@..D......####.##.............\n###############$$$$####################$$$$#$$#############\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n`,\n]\n\nconst song1 = new Audio('./assets/audio/A_rainy_day-JeffSpeed68.mp3');\nconst song2 = new Audio('./assets/audio/Shrimp_Rich-septahelix.mp3');\nconst song3 = new Audio('./assets/audio/Staying_Positive-jlbrock44.mp3');\n\nconst MUSIC_LIST = [\n  song1,\n  song2,\n  song3,\n  song1,\n  song2,\n  song3,\n  song1\n];\n\nmodule.exports = { GAME_LEVELS, MUSIC_LIST };\n\n//# sourceURL=webpack:///./src/levels.js?");

/***/ }),

/***/ "./src/life.js":
/*!*********************!*\
  !*** ./src/life.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Life {\n  constructor() {\n    this.value = 5;\n    this.sprites = new Image();\n    this.sprites.src = './assets/sprites/hearts/animated.png';\n    this.hit = false;\n\n    this.tickCount = 0;\n    this.maxTick = 5;\n    this.frameCount = 0;\n    this.maxFrame = 4;\n  }\n\n  lose() {\n    this.hit = true;\n  }\n\n  step() {\n    if (this.hit) {\n      this.tickCount += 1\n      if (this.tickCount > this.maxTick) {\n        this.tickCount = 0;\n        this.frameCount += 1;\n      } \n      if (this.frameCount > this.maxFrame) {\n        this.hit = false;\n        this.value -= 1;\n        this.frameCount = 0;\n      }\n    }\n  }\n  \n  draw(ctx) {\n    // first few hearts\n    let xPosition = 20;\n\n    for (let i = 1; i < this.value; i++) {\n      ctx.drawImage(this.sprites,\n        0, 0,\n        17, 17,\n        xPosition, 15,\n        25, 25\n      );\n      xPosition += 26;\n    }\n\n    if (this.value > 0) {\n      switch (this.frameCount) {\n        case 0:\n          ctx.drawImage(this.sprites, 0, 0, 17, 17, xPosition, 15, 25, 25);\n          break;\n        case 1:\n          ctx.drawImage(this.sprites, 17, 0, 17, 17, xPosition, 15, 25, 25);\n          break;\n        case 2:\n          ctx.drawImage(this.sprites, 34, 0, 17, 17, xPosition, 15, 25, 25);\n          break;\n        case 3:\n          ctx.drawImage(this.sprites, 51, 0, 17, 17, xPosition, 15, 25, 25);\n          break;\n        case 4:\n          ctx.drawImage(this.sprites, 68, 0, 17, 17, xPosition, 10, 17, 17);\n          break;\n      }\n      xPosition += 26;\n    }\n\n    for (let i = 1; i < (6 - this.value); i++) {\n      ctx.drawImage(this.sprites,\n        68, 0,\n        17, 17,\n        xPosition, 15,\n        25, 25\n      );\n      xPosition += 26;\n    }\n  }\n\n};\n\nmodule.exports = Life;\n\n//# sourceURL=webpack:///./src/life.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\nconst Egg = __webpack_require__(/*! ./egg */ \"./src/egg.js\");\n\n// each tile on the map is going to be 50 x 50\n// this makes the player size 1 x 1.4 tiles\nconst CONSTANTS = {\n  WIDTH: 50,\n  HEIGHT: 70,\n  TILE_SIZE: 50,\n  TICKS_PER_FRAME: 6,\n  GRAVITY: 0.29,\n  X_SPEED: 0.4,\n  JUMP_SPEED: 1.1,\n  STARTING_VEL: new Vector(0, 0),\n  RELOAD_TIME: 250, // in milliseconds\n  MAX_FRAME_COUNT: 7,\n};\n\nconst FRONT_SPRITE_POS = {\n  walk1: [699, 4],\n  walk2: [681, 4],\n  walk3: [664, 4],\n  walk4: [647, 4],\n  walk5: [630, 4],\n  walk6: [613, 5],\n  walk7: [596, 4],\n  walk8: [579, 4],\n  hit1: [135, 8],\n  hit2: [117, 8],\n  hit3: [97, 7],\n  hit4: [79, 7],\n  hit5: [57, 10],\n  hit6: [35, 9],\n  hit7: [14, 10],\n  shoot1: [552, 5],\n  shoot2: [533, 4],\n  shoot3: [510, 4],\n  shoot4: [486, 4],\n  shoot5: [462, 4],\n  shoot6: [440, 4],\n  shoot7: [422, 6],\n  shoot8: [400, 4],\n  stand: [719, 4],\n  jump1: [278, 3],\n  jump2: [295, 3],\n  fall: [9, 3]\n};\n\nconst BACK_SPRITE_POS = {\n  lookUp: [525, 4],\n  walk1: [142, 4],\n  walk2: [125, 4],\n  walk3: [108, 5],\n  walk4: [91, 4],\n  walk5: [74, 4],\n  walk6: [57, 4],\n  walk7: [40, 4],\n  walk8: [22, 4],\n  hit1: [50, 7],\n  hit2: [68, 7],\n  hit3: [88, 6],\n  hit4: [106, 6],\n  hit5: [128, 9],\n  hit6: [147, 8],\n  hit7: [169, 9],\n  shoot1: [167, 5],\n  shoot2: [187, 4],\n  shoot3: [207, 4],\n  shoot4: [229, 4],\n  shoot5: [253, 4],\n  shoot6: [277, 4],\n  shoot7: [299, 6],\n  shoot8: [318, 4],\n  stand: [2, 4],\n  jump1: [278, 3],\n  jump2: [295, 3],\n  fall: [9, 3]\n};\n\nconst SPRITE_SIZE = {\n  lookUp: [15, 25],\n  walk: [15, 25],\n  stand: [15, 25],\n  jump1: [17, 26],\n  jump2: [19, 26],\n  fall: [21, 26],\n  hit1: [15, 25],\n  hit2: [15, 25],\n  hit3: [15, 25],\n  hit4: [15, 25],\n  hit5: [15, 23],\n  hit6: [18, 25],\n  hit7: [17, 24],\n  shoot1: [17, 24],\n  shoot2: [16, 25],\n  shoot3: [19, 25],\n  shoot4: [21, 25],\n  shoot5: [21, 25],\n  shoot6: [19, 25],\n  shoot7: [15, 23],\n  shoot8: [18, 25],\n};\n\n\nclass Player {\n  constructor(pos) {\n    this.pos = pos.minus(new Vector(0, 0.333)); // offset needed because character is taller than single tile\n    this.vel = CONSTANTS.STARTING_VEL;\n\n    // images here\n    this.frontSprites = new Image();\n    this.backSprites = new Image();\n    this.frontHitSprites = new Image();\n    this.backHitSprites = new Image();\n    this.frontSprites.src = './assets/sprites/yoshi.png';\n    this.backSprites.src = './assets/sprites/back-yoshi.png';\n    this.frontHitSprites.src = './assets/sprites/front-hit-yoshi.png';\n    this.backHitSprites.src = './assets/sprites/back-hit-yoshi.png';\n\n    //sounds here\n    this.jumpSound = new Audio('./assets/audio/jump.wav');\n    this.hurtSound = new Audio('./assets/audio/hurt.wav');\n    this.shootSound = new Audio('./assets/audio/shoot.wav');\n    this.jumpSound.volume = 0.3;\n    this.hurtSound.volume = 0.3;\n    this.shootSound.volume = 0.3;\n    \n    // facing front at the start\n    this.facingFront = true;\n    this.movingTo = 0;\n    this.wasMoving = 0;\n    this.verticalPerspective = 0;\n    this.jumping = false;\n    this.onGround = false;\n\n    this.reloading = false; // this is for 'throttling' shooting of eggs\n    this.shooting = false;\n    this.shootingUp = false; // these two are differentiated so that animations can be differentiated\n    this.muted = false;\n    // http://www.williammalone.com/articles/create-html5-canvas-javascript-sprite-animation/\n    this.frameCount = 0;\n    this.maxFrameCount = CONSTANTS.MAX_FRAME_COUNT;\n    this.tickCount = 0;\n    this.ticksPerFrame = CONSTANTS.TICKS_PER_FRAME;\n\n    this.handleFrames = this.handleFrames.bind(this);\n    this.handleMovement = this.handleMovement.bind(this);\n    this.checkDoor = this.checkDoor.bind(this);\n  }\n\n  static create(pos) {\n    return new Player(pos);\n  }\n\n  mute() {\n    this.muted = true;\n  }\n\n  unmute() {\n    this.muted = false;\n  }\n\n  get type() {\n    return \"player\";\n  }\n\n  get size() {\n    return new Vector(0.8, 1.333);\n  }\n\n  checkDoor(state) {\n    if (state.door.levelComplete && state.level.overlap(state.player, state.door)) {\n      state.level.win();\n    }\n  }\n\n  // moveTo determines x-direction movement\n  moveTo(num) {\n    if (!this.isHit) { // if hit, you don't control your own velocity (for a bit);\n      this.movingTo = num;\n      switch (num) {\n        case 1:\n          this.vel.x = CONSTANTS.X_SPEED;\n          break;\n        case -1:\n          this.vel.x = -CONSTANTS.X_SPEED;\n          break;\n        case 0:\n          this.vel.x = 0;\n          break;\n      }\n    }\n  }\n\n  lookVertically(num) {\n    this.verticalPerspective = num;\n  }\n\n  jump() {\n    if (!this.isHit && !this.jumping && this.onGround) {\n      this.vel.y = -CONSTANTS.JUMP_SPEED;\n      this.jumping = true;\n      if (!this.muted) this.jumpSound.play();\n    }\n  }\n\n  getHit(vel, state) {\n    this.tickCount = 0;\n    this.frameCount = 0;\n    this.isHit = true;\n    this.vel = vel;\n    state.life.lose();\n    if (!this.muted) this.hurtSound.play();\n    setTimeout(() => {\n      // Movement must continue after use is hit (bit of a hacky fix, but...)\n      if ((!key.isPressed('left') && !key.isPressed('right')) || (key.isPressed('left') && key.isPressed('right'))) {\n        this.vel = new Vector(0, this.vel.y);\n      } else if (key.isPressed('left')) {\n        this.vel = new Vector(-CONSTANTS.X_SPEED, this.vel.y);\n      } else if (key.isPressed('right')) {\n        this.vel = new Vector(CONSTANTS.X_SPEED, this.vel.y);\n      }\n      // this.vel = new Vector(0, this.vel.y);\n      this.isHit = false;\n      \n    }, 800); // can either do it here or elsewhere;\n  }\n\n  recoil(vel) {\n    this.vel = vel;\n  }\n\n  shoot(state) {\n    if (!this.reloading && !this.shooting && !this.shootingUp) {\n      this.tickCount = 0;\n      this.frameCount = 0;\n      this.shooting = true;\n      this.reloading = true;\n      let newEgg;\n      if (this.facingFront) {\n        newEgg = new Egg(this.pos, new Vector(0.7 + this.vel.x / 2, -1));\n      } else {\n        newEgg = new Egg(this.pos, new Vector(-0.7 + this.vel.x / 2, -1));\n      }\n      state.actors.push(newEgg);\n      if (!this.muted) this.shootSound.play();\n    }\n  }\n\n  shootUp(state) {\n    if (!this.reloading && !this.shooting && !this.shootingUp) {\n      this.tickCount = 0;\n      this.frameCount = 0;\n      this.shootingUp = true;\n      this.reloading = true;\n      // shooting straight up\n      const newEgg = new Egg(this.pos, new Vector(0, -1.8));\n      state.actors.push(newEgg);\n      if (!this.muted) this.shootSound.play();\n    }\n  }\n\n  draw(ctx, viewPortCenter) {\n    this.viewPortCenter = viewPortCenter;\n\n    if (this.isHit && this.facingFront) {\n      if ([0].includes(this.frameCount)) {\n        return this.selectSprite(ctx, FRONT_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.frontHitSprites);\n      } else if ([1].includes(this.frameCount)) {\n        return this.selectSprite(ctx, FRONT_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.frontHitSprites);\n      } else if ([2].includes(this.frameCount)) {\n        return this.selectSprite(ctx, FRONT_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.frontHitSprites);\n      } else if ([3].includes(this.frameCount)) {\n        return this.selectSprite(ctx, FRONT_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.frontHitSprites);\n      } else if ([4].includes(this.frameCount)) {\n        return this.selectSprite(ctx, FRONT_SPRITE_POS['hit6'], SPRITE_SIZE['hit6'], this.frontHitSprites);\n      } else if ([5].includes(this.frameCount)) {\n        return this.selectSprite(ctx, FRONT_SPRITE_POS['hit7'], SPRITE_SIZE['hit7'], this.frontHitSprites);\n      } else if ([6, 7].includes(this.frameCount)) {\n        return this.selectSprite(ctx, FRONT_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.frontHitSprites);\n      } \n    } else if (this.isHit && !this.facingFront) {\n      if ([0].includes(this.frameCount)) {\n        return this.selectSprite(ctx, BACK_SPRITE_POS['hit1'], SPRITE_SIZE['hit1'], this.backHitSprites);\n      } else if ([1].includes(this.frameCount)) {\n        return this.selectSprite(ctx, BACK_SPRITE_POS['hit2'], SPRITE_SIZE['hit2'], this.backHitSprites);\n      } else if ([2].includes(this.frameCount)) {\n        return this.selectSprite(ctx, BACK_SPRITE_POS['hit3'], SPRITE_SIZE['hit3'], this.backHitSprites);\n      } else if ([3].includes(this.frameCount)) {\n        return this.selectSprite(ctx, BACK_SPRITE_POS['hit4'], SPRITE_SIZE['hit4'], this.backHitSprites);\n      } else if ([4].includes(this.frameCount)) {\n        return this.selectSprite(ctx, BACK_SPRITE_POS['hit5'], SPRITE_SIZE['hit5'], this.backHitSprites);\n      } else if ([5].includes(this.frameCount)) {\n        return this.selectSprite(ctx, BACK_SPRITE_POS['hit6'], SPRITE_SIZE['hit6'], this.backHitSprites);\n      } else if ([6, 7].includes(this.frameCount)) {\n        return this.selectSprite(ctx, BACK_SPRITE_POS['hit7'], SPRITE_SIZE['hit7'], this.backHitSprites);\n      } \n    }\n\n    if (this.shooting && this.facingFront) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot1'], SPRITE_SIZE['shoot1'], this.frontSprites);\n        case 1:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot2'], SPRITE_SIZE['shoot2'], this.frontSprites);\n        case 2:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot3'], SPRITE_SIZE['shoot3'], this.frontSprites);\n        case 3:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot4'], SPRITE_SIZE['shoot4'], this.frontSprites);\n        case 4:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot5'], SPRITE_SIZE['shoot5'], this.frontSprites);\n        case 5:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot6'], SPRITE_SIZE['shoot6'], this.frontSprites);\n        case 6:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot7'], SPRITE_SIZE['shoot7'], this.frontSprites);\n        case 7:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['shoot8'], SPRITE_SIZE['shoot8'], this.frontSprites);\n      }\n    } else if (this.shooting && !this.facingFront) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot1'], SPRITE_SIZE['shoot1'], this.backSprites);\n        case 1:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot2'], SPRITE_SIZE['shoot2'], this.backSprites);\n        case 2:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot3'], SPRITE_SIZE['shoot3'], this.backSprites);\n        case 3:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot4'], SPRITE_SIZE['shoot4'], this.backSprites);\n        case 4:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot5'], SPRITE_SIZE['shoot5'], this.backSprites);\n        case 5:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot6'], SPRITE_SIZE['shoot6'], this.backSprites);\n        case 6:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot7'], SPRITE_SIZE['shoot7'], this.backSprites);\n        case 7:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['shoot8'], SPRITE_SIZE['shoot8'], this.backSprites);\n      }\n    }\n\n    if (this.verticalPerspective > 0) {\n      this.selectSprite(ctx, BACK_SPRITE_POS['lookUp'], SPRITE_SIZE['lookUp'], this.backSprites);\n    } else if (this.movingTo === 0) {\n      return this.facingFront ? this.selectSprite(ctx, FRONT_SPRITE_POS['stand'], SPRITE_SIZE['stand'], this.frontSprites)\n        : this.selectSprite(ctx, BACK_SPRITE_POS['stand'], SPRITE_SIZE['stand'], this.backSprites);\n    } else if (this.movingTo > 0) {\n      switch(this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk1'], SPRITE_SIZE['walk'], this.frontSprites);\n        case 1:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk2'], SPRITE_SIZE['walk'], this.frontSprites);\n        case 2:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk3'], SPRITE_SIZE['walk'], this.frontSprites);\n        case 3:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk4'], SPRITE_SIZE['walk'], this.frontSprites);\n        case 4:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk5'], SPRITE_SIZE['walk'], this.frontSprites);\n        case 5:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk6'], SPRITE_SIZE['walk'], this.frontSprites);\n        case 6:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk7'], SPRITE_SIZE['walk'], this.frontSprites);\n        case 7:\n          return this.selectSprite(ctx, FRONT_SPRITE_POS['walk8'], SPRITE_SIZE['walk'], this.frontSprites);\n      }\n    } else if (this.movingTo < 0) {\n      switch (this.frameCount) {\n        case 0:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk1'], SPRITE_SIZE['walk'], this.backSprites);\n        case 1:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk2'], SPRITE_SIZE['walk'], this.backSprites);\n        case 2:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk3'], SPRITE_SIZE['walk'], this.backSprites);\n        case 3:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk4'], SPRITE_SIZE['walk'], this.backSprites);\n        case 4:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk5'], SPRITE_SIZE['walk'], this.backSprites);\n        case 5:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk6'], SPRITE_SIZE['walk'], this.backSprites);\n        case 6:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk7'], SPRITE_SIZE['walk'], this.backSprites);\n        case 7:\n          return this.selectSprite(ctx, BACK_SPRITE_POS['walk8'], SPRITE_SIZE['walk'], this.backSprites);\n        }\n    }\n  }\n\n  handleFrames() {\n    // Increment ticks if continuously moving\n    if (this.shooting || this.shootingUp || this.isHit) {\n      this.tickCount += 1;\n    } else if (this.movingTo !== 0) {\n      if (this.wasMoving === this.movingTo) {\n        this.tickCount += 1;\n      } else {\n        this.tickCount = 0;\n        this.frameCount = 0;\n      }\n    } else { // just in case ticks & frames are used for something else than walking!\n      this.tickCount = 0;\n      this.frameCount = 0;\n    }\n\n    // Increment frames if enough ticks are reached on the same action\n    if (this.tickCount > this.ticksPerFrame) {\n      this.tickCount = 0;\n      this.frameCount += 1;\n      if (this.frameCount === this.maxFrameCount) {\n        this.frameCount = 0;\n        this.shooting = false;\n        this.shootingUp = false;\n        setTimeout(() => {\n          if (this.reloading === true) this.reloading = false;\n        }, CONSTANTS.RELOAD_TIME);\n      }\n    }\n    \n    // If the player isn't standing still, then update 'front' status\n    if (this.movingTo !== 0) this.facingFront = this.movingTo > 0;\n    \n    // Update this for checks done during the next step\n    this.wasMoving = this.movingTo;\n  }\n\n  handleMovement(timeStep, state) {\n    const xVel = this.vel.x;\n    const xMoveTo = this.pos.plus(new Vector(xVel * timeStep, 0));\n    if (!state.level.touches(xMoveTo, this.size, \"wall\") && !state.level.touches(xMoveTo, this.size, \"tile\") ) {\n      this.pos = xMoveTo;\n    }\n\n    let yVel = this.vel.y + timeStep * CONSTANTS.GRAVITY;\n    const yMoveTo = this.pos.plus(new Vector(0, yVel * timeStep));\n    if (!state.level.touches(yMoveTo, this.size, \"wall\") && !state.level.touches(yMoveTo, this.size, \"tile\")) {\n      // jumping or falling\n      this.onGround = false;\n      this.pos = yMoveTo;\n    } else if (yMoveTo.y > this.pos.y) {\n      // player is on the ground\n      yVel = 0;\n      this.jumping = false;\n      this.onGround = true;\n    }\n\n    this.vel = new Vector(xVel, yVel);\n  }\n\n  step(timeStep, state) {\n    this.handleFrames();\n    this.handleMovement(timeStep, state);\n  }\n\n  selectSprite(ctx, coordinates, size, spritesImg) {\n    // [15, 25] is taken as the default sprite size\n    const width = CONSTANTS.TILE_SIZE * this.size.x * size[0] / 15;\n    const height = CONSTANTS.TILE_SIZE * this.size.y * size[1] / 25;\n\n    // ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n    // s is source, d is destination\n    const extraHeight = 3; // Otherwise Yoshi looks like he's floating!!!\n    const xOnScreen = 950/2 + 50*(this.pos.x - this.viewPortCenter.x);\n    const yOnScreen = 450/2 + 50*(this.pos.y - this.viewPortCenter.y) + extraHeight;\n\n    ctx.drawImage(spritesImg, \n      coordinates[0], coordinates[1], \n      size[0], size[1],\n      xOnScreen, yOnScreen,\n      width, height);\n  }\n}\n\nmodule.exports = Player;\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ }),

/***/ "./src/start/screen.js":
/*!*****************************!*\
  !*** ./src/start/screen.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { GAME_LEVELS, MUSIC_LIST } = __webpack_require__(/*! ../levels */ \"./src/levels.js\");\n\n// Note: this is super hard to do without React\n// I have gained a new appreciation for React/other similar libraries.\n\nclass Screen {\n  constructor(selectLevel) {\n    this.startButtons = document.getElementById(\"start-button-container\");\n    this.startLogo = document.getElementById(\"start-logo\");\n    this.levelSelectButtonsScreen = document.getElementById(\"level-select-button-container\");\n    this.startScreen = document.getElementById(\"start\");\n\n    this.aboutScreen = document.getElementById('about-container');\n    this.howPlayScreen = document.getElementById('how-play-container');\n    this.altHowPlayScreen = document.getElementById('alt-how-play-container');\n    this.creditScreen = document.getElementById('credit-container');\n\n    this.levels = GAME_LEVELS;\n    this.musicList = MUSIC_LIST;\n    this.selectLevel = selectLevel;\n\n    this.exitHowPlayScreen = this.exitHowPlayScreen.bind(this);\n    this.exitAboutScreen = this.exitAboutScreen.bind(this);\n    this.exitCreditScreen = this.exitCreditScreen.bind(this);\n\n    this.enterLevelSelect = this.enterLevelSelect.bind(this);\n    this.populateLevelSelect = this.populateLevelSelect.bind(this);\n    this.switchKeys = this.switchKeys.bind(this);\n    this.attachStartButtons();\n    this.attachGameEndButtons();\n  }\n\n  switchKeys() {\n    if (key.getScope() === 'main') {\n      key.setScope('alt');\n      this.exitHowPlayScreen();\n      this.enterHowPlayScreen();\n    } else if (key.getScope() === 'alt') {\n      key.setScope('main');\n      this.exitHowPlayScreen();\n      this.enterHowPlayScreen();\n    }\n  }\n\n  attachGameEndButtons() {\n    // These are on the defeat & victory screens\n    const buttons = document.getElementsByClassName(\"back-to-start\");\n    buttons.item(0).onclick = () => {\n      const screen = document.getElementById(\"victory-screen\");\n      screen.style.display = \"none\";\n      this.startScreen.style.display = \"block\";\n      this.exitLevelSelect();\n    }\n    buttons.item(1).onclick = () => {\n      const screen = document.getElementById(\"defeat-screen\");\n      screen.style.display = \"none\";\n      this.startScreen.style.display = \"block\";\n      this.exitLevelSelect();\n    }\n  }\n\n  attachStartButtons() {\n    const levelSelectButton = document.getElementById(\"level-select\");\n    const howPlayButton = document.getElementById(\"how-play-select\");\n    const aboutButton = document.getElementById(\"about-select\");\n    const creditButton = document.getElementById(\"credit-select\");\n    const changeKey = document.getElementById(\"change-key\");\n    const altChangeKey = document.getElementById(\"alt-change-key\");\n\n    levelSelectButton.onclick = () => this.enterLevelSelect();\n    howPlayButton.onclick = () => this.enterHowPlayScreen();\n    aboutButton.onclick = () => this.enterAboutScreen();\n    creditButton.onclick = () => this.enterCreditScreen();\n    changeKey.onclick = () => this.switchKeys();\n    altChangeKey.onclick = () => this.switchKeys();\n    this.aboutScreen.firstElementChild.onclick = () => this.exitAboutScreen();\n    this.howPlayScreen.firstElementChild.onclick = () => this.exitHowPlayScreen();\n    this.altHowPlayScreen.firstElementChild.onclick = () => this.exitHowPlayScreen();\n    this.creditScreen.firstElementChild.onclick = () => this.exitCreditScreen();\n  }\n\n  enterCreditScreen() {\n    this.startButtons.style.display = \"none\";\n    this.startLogo.style.display = \"none\";\n    this.creditScreen.style.display = \"flex\";\n  }\n\n  exitCreditScreen() {\n    this.startButtons.style.display = \"flex\";\n    this.startLogo.style.display = \"block\";\n    this.creditScreen.style.display = \"none\";\n  }\n\n  enterAboutScreen() {\n    this.startButtons.style.display = \"none\";\n    this.startLogo.style.display = \"none\";\n    this.aboutScreen.style.display = \"flex\";\n  }\n\n  exitAboutScreen() {\n    this.startButtons.style.display = \"flex\";\n    this.startLogo.style.display = \"block\";\n    this.aboutScreen.style.display = \"none\";\n  }\n\n  enterHowPlayScreen() {\n    if (key.getScope() === 'main') {\n      this.startButtons.style.display = \"none\";\n      this.startLogo.style.display = \"none\"\n      this.howPlayScreen.style.display = \"flex\";\n    } else if (key.getScope() === 'alt') {\n      this.startButtons.style.display = \"none\";\n      this.startLogo.style.display = \"none\"\n      this.altHowPlayScreen.style.display = \"flex\";\n    }\n  }\n\n  exitHowPlayScreen() {\n    this.startButtons.style.display = \"flex\";\n    this.startLogo.style.display = \"block\";\n    this.howPlayScreen.style.display = \"none\";\n    this.altHowPlayScreen.style.display = \"none\";\n  }\n\n  enterLevelSelect() {\n    this.startButtons.style.display = \"none\";\n    this.startLogo.style.display = \"none\"\n    this.levelSelectButtonsScreen.style.display = \"flex\";\n    this.populateLevelSelect(1);\n  }\n\n  exitLevelSelect() {\n    this.startButtons.style.display = \"flex\";\n    this.startLogo.style.display = \"block\";\n    this.levelSelectButtonsScreen.style.display = \"none\";\n  }\n\n  populateLevelSelect(page) {\n    const firstIdx = 0 + (page - 1) * 3;\n    const lastIdx = firstIdx + 3;\n    const levels = this.levels.slice(firstIdx, lastIdx);\n    const musics = this.musicList.slice(firstIdx, lastIdx);\n    while (this.levelSelectButtonsScreen.firstChild) {\n      this.levelSelectButtonsScreen.removeChild(this.levelSelectButtonsScreen.firstChild);\n    }\n\n    const back = document.createElement(\"BUTTON\");\n    back.innerHTML = \"Back to Main\";\n    back.classList.add(\"back-to-main\");\n    back.onclick = () => this.exitLevelSelect();\n    this.levelSelectButtonsScreen.appendChild(back);\n\n    levels.forEach((level, i) => {\n      const button = document.createElement(\"BUTTON\");\n      button.innerHTML = `Level ${firstIdx + i + 1}`;\n      button.onclick = () => {\n        this.startScreen.style.display = \"none\";\n        this.selectLevel(level, musics[i]);\n      };\n      button.classList.add(\"level-select-button\");\n      this.levelSelectButtonsScreen.appendChild(button);\n    });\n\n    // then if there are more on the next page, or previous page...\n    if (page > 1 || this.levels.length >= lastIdx) {\n      const div = document.createElement(\"DIV\");\n      div.classList.add(\"level-page-button-container\");\n      if (page > 1) {\n        const selectButton = document.createElement(\"BUTTON\");\n        selectButton.innerHTML = \"Previous Page\";\n        selectButton.classList.add(\"level-page-button\");\n        selectButton.onclick = () => this.populateLevelSelect(page - 1);\n        div.appendChild(selectButton);\n      }\n      if (this.levels.length >= lastIdx) {\n        const selectButton = document.createElement(\"BUTTON\");\n        selectButton.innerHTML = \"Next Page\";\n        selectButton.classList.add(\"level-page-button\");\n        selectButton.onclick = () => this.populateLevelSelect(page + 1);\n        div.appendChild(selectButton);\n      }\n      this.levelSelectButtonsScreen.appendChild(div);\n    }\n  }\n}\n\nmodule.exports = Screen;\n\n//# sourceURL=webpack:///./src/start/screen.js?");

/***/ }),

/***/ "./src/tile.js":
/*!*********************!*\
  !*** ./src/tile.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const Vector = __webpack_require__(/*! ./vector */ \"./src/vector.js\");\n\nconst CONSTANTS = {\n  GAME_SIZE:[950, 450],\n  TILE_SIZE: 50,\n};\n\nconst SPRITE_POS = {\n  grass1: [98, 1],\n  dirt1: [98, 16]\n};\n\nconst SPRITE_SIZE = {\n  grass1: [44, 45],\n  dirt1: [42, 30]\n}\n\nclass Tile {\n  // pos is a Vector object!\n  // category is potentially used to differentiate tiles (visually)\n  // category is passed as char (ex: \"#\");\n  constructor(pos, char) {\n    this.pos = pos;\n    this.char = char;\n    this.sprites = new Image();\n    this.sprites.src = './assets/sprites/pixel/terrain.png';\n  }\n\n  static create(pos, category) {\n    return new Tile(pos, category);\n  }\n\n  get type() {\n    return \"tile\";\n  }\n\n  get size() {\n    return new Vector(1, 1);\n  }\n\n  draw(ctx, viewPortCenter) {\n    const width = CONSTANTS.TILE_SIZE;\n    const height = CONSTANTS.TILE_SIZE;\n    const xOnScreen = 950 / 2 + 50 * (this.pos.x - viewPortCenter.x);\n    const yOnScreen = 450 / 2 + 50 * (this.pos.y - viewPortCenter.y);\n    if (this.char === \"#\") {\n      ctx.drawImage(this.sprites,\n        SPRITE_POS[\"grass1\"][0], SPRITE_POS[\"grass1\"][1],\n        SPRITE_SIZE[\"grass1\"][0], SPRITE_SIZE[\"grass1\"][1],\n        xOnScreen, yOnScreen,\n        CONSTANTS.TILE_SIZE, CONSTANTS.TILE_SIZE);\n    } else if (this.char === \"$\") {\n      ctx.drawImage(this.sprites,\n        SPRITE_POS[\"dirt1\"][0], SPRITE_POS[\"dirt1\"][1],\n        SPRITE_SIZE[\"dirt1\"][0], SPRITE_SIZE[\"dirt1\"][1],\n        xOnScreen, yOnScreen,\n        width, height);\n    }\n  }\n}\n\nmodule.exports = Tile;\n\n//# sourceURL=webpack:///./src/tile.js?");

/***/ }),

/***/ "./src/vector.js":
/*!***********************!*\
  !*** ./src/vector.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Vector {\n  constructor(x, y) {\n    this.x = x; \n    this.y = y;\n  }\n\n  plus(other) {\n    return new Vector(this.x + other.x, this.y + other.y);\n  }\n\n  minus(other) {\n    return new Vector(this.x - other.x, this.y - other.y);\n  }\n\n  distanceFrom(other) {\n    return new Vector(Math.abs(this.x - other.x), Math.abs(this.y - other.y));\n  }\n  \n  times(factor) {\n    return new Vector(this.x * factor, this.y * factor);\n  }\n\n  // this gets a unit vector first, then scales it to the factor (perfect for bullets)\n  scale(factor) {\n    const i = this.x / Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    const j = this.y / Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    return new Vector(i * factor, j * factor);\n  }\n}\n\nmodule.exports = Vector;\n\n//# sourceURL=webpack:///./src/vector.js?");

/***/ })

/******/ });